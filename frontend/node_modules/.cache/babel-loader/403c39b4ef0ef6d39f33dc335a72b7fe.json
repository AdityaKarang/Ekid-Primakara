{"remainingRequest":"C:\\DATA ADIT\\Project EKID\\frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\DATA ADIT\\Project EKID\\frontend\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\DATA ADIT\\Project EKID\\frontend\\src\\core\\mock\\mock.service.js","dependencies":[{"path":"C:\\DATA ADIT\\Project EKID\\frontend\\src\\core\\mock\\mock.service.js","mtime":1681660858000},{"path":"C:\\DATA ADIT\\Project EKID\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1699792569128},{"path":"C:\\DATA ADIT\\Project EKID\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1699792570776},{"path":"C:\\DATA ADIT\\Project EKID\\frontend\\node_modules\\eslint-loader\\index.js","mtime":1699792566119}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IFZ1ZSBmcm9tICJ2dWUiOwoKdmFyIE1vY2tBZGFwdGVyID0gcmVxdWlyZSgiYXhpb3MtbW9jay1hZGFwdGVyIik7IC8vIG1vY2sgdGVzdGluZyB1c2VyIGFjY291bnRzCgoKdmFyIHVzZXJzID0gW3sKICBlbWFpbDogImFkbWluQGRlbW8uY29tIiwKICBwYXNzd29yZDogImRlbW8iLAogIHRva2VuOiAibWdmaTVqdWY3NGoiCn0sIHsKICBlbWFpbDogImFkbWluMkBkZW1vLmNvbSIsCiAgcGFzc3dvcmQ6ICJkZW1vIiwKICB0b2tlbjogImZnajhmamRmazQzIgp9XTsKdmFyIE1vY2tTZXJ2aWNlID0gewogIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7Ly8gdGhpcyBzZXRzIHRoZSBtb2NrIGFkYXB0ZXIgb24gdGhlIGRlZmF1bHQgaW5zdGFuY2UKICAgIC8vIHZhciBtb2NrID0gbmV3IE1vY2tBZGFwdGVyKFZ1ZS5heGlvcyk7CiAgICAvLyAvLyBtb2NrIGxvZ2luIHJlcXVlc3QKICAgIC8vIG1vY2sub25Qb3N0KCIvbG9naW4iKS5yZXBseShkYXRhID0+IHsKICAgIC8vICAgY29uc3QgY3JlZGVudGlhbCA9IEpTT04ucGFyc2UoZGF0YS5kYXRhKTsKICAgIC8vICAgY29uc3QgZm91bmQgPSB1c2Vycy5maW5kKHVzZXIgPT4gewogICAgLy8gICAgIHJldHVybiAoCiAgICAvLyAgICAgICBjcmVkZW50aWFsLmVtYWlsID09PSB1c2VyLmVtYWlsICYmCiAgICAvLyAgICAgICBjcmVkZW50aWFsLnBhc3N3b3JkID09PSB1c2VyLnBhc3N3b3JkCiAgICAvLyAgICAgKTsKICAgIC8vICAgfSk7CiAgICAvLyAgIGlmIChmb3VuZCkgewogICAgLy8gICAgIHJldHVybiBbMjAwLCBmb3VuZF07CiAgICAvLyAgIH0KICAgIC8vICAgcmV0dXJuIFs0MDQsIHsgZXJyb3JzOiBbIlRoZSBsb2dpbiBkZXRhaWwgaXMgaW5jb3JyZWN0Il0gfV07CiAgICAvLyB9KTsKICAgIC8vIC8vIG1vY2sgdG8gdmVyaWZ5IGF1dGhlbnRpY2F0aW9uCiAgICAvLyBtb2NrLm9uR2V0KC9cL3ZlcmlmeVwvPy8pLnJlcGx5KGRhdGEgPT4gewogICAgLy8gICBjb25zdCB0b2tlbiA9IGRhdGEuaGVhZGVycy5BdXRob3JpemF0aW9uLnJlcGxhY2UoIlRva2VuICIsICIiKTsKICAgIC8vICAgaWYgKHRva2VuICE9PSAidW5kZWZpbmVkIikgewogICAgLy8gICAgIGNvbnN0IGZvdW5kID0gdXNlcnMuZmluZCh1c2VyID0+IHsKICAgIC8vICAgICAgIHJldHVybiB0b2tlbiA9PT0gdXNlci50b2tlbjsKICAgIC8vICAgICB9KTsKICAgIC8vICAgICByZXR1cm4gWzIwMCwgZm91bmRdOwogICAgLy8gICB9CiAgICAvLyAgIHJldHVybiBbNDAxLCB7IGVycm9yczogWyJJbnZhbGlkIGF1dGhlbnRpY2F0aW9uIl0gfV07CiAgICAvLyB9KTsKICB9Cn07CmV4cG9ydCBkZWZhdWx0IE1vY2tTZXJ2aWNlOw=="},{"version":3,"sources":["C:/DATA ADIT/Project EKID/frontend/src/core/mock/mock.service.js"],"names":["Vue","MockAdapter","require","users","email","password","token","MockService","init"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,KAAhB;;AAEA,IAAIC,WAAW,GAAGC,OAAO,CAAC,oBAAD,CAAzB,C,CAEA;;;AACA,IAAMC,KAAK,GAAG,CACZ;AACEC,EAAAA,KAAK,EAAE,gBADT;AAEEC,EAAAA,QAAQ,EAAE,MAFZ;AAGEC,EAAAA,KAAK,EAAE;AAHT,CADY,EAMZ;AACEF,EAAAA,KAAK,EAAE,iBADT;AAEEC,EAAAA,QAAQ,EAAE,MAFZ;AAGEC,EAAAA,KAAK,EAAE;AAHT,CANY,CAAd;AAaA,IAAMC,WAAW,GAAG;AAClBC,EAAAA,IADkB,kBACX,CACL;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AA/BiB,CAApB;AAkCA,eAAeD,WAAf","sourcesContent":["import Vue from \"vue\";\r\n\r\nvar MockAdapter = require(\"axios-mock-adapter\");\r\n\r\n// mock testing user accounts\r\nconst users = [\r\n  {\r\n    email: \"admin@demo.com\",\r\n    password: \"demo\",\r\n    token: \"mgfi5juf74j\"\r\n  },\r\n  {\r\n    email: \"admin2@demo.com\",\r\n    password: \"demo\",\r\n    token: \"fgj8fjdfk43\"\r\n  }\r\n];\r\n\r\nconst MockService = {\r\n  init() {\r\n    // this sets the mock adapter on the default instance\r\n    // var mock = new MockAdapter(Vue.axios);\r\n\r\n    // // mock login request\r\n    // mock.onPost(\"/login\").reply(data => {\r\n    //   const credential = JSON.parse(data.data);\r\n    //   const found = users.find(user => {\r\n    //     return (\r\n    //       credential.email === user.email &&\r\n    //       credential.password === user.password\r\n    //     );\r\n    //   });\r\n    //   if (found) {\r\n    //     return [200, found];\r\n    //   }\r\n    //   return [404, { errors: [\"The login detail is incorrect\"] }];\r\n    // });\r\n\r\n    // // mock to verify authentication\r\n    // mock.onGet(/\\/verify\\/?/).reply(data => {\r\n    //   const token = data.headers.Authorization.replace(\"Token \", \"\");\r\n    //   if (token !== \"undefined\") {\r\n    //     const found = users.find(user => {\r\n    //       return token === user.token;\r\n    //     });\r\n    //     return [200, found];\r\n    //   }\r\n    //   return [401, { errors: [\"Invalid authentication\"] }];\r\n    // });\r\n  }\r\n};\r\n\r\nexport default MockService;\r\n"]}]}