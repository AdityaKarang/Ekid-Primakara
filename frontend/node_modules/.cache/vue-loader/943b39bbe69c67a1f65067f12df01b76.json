{"remainingRequest":"C:\\DATA ADIT\\Project EKID\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\DATA ADIT\\Project EKID\\frontend\\src\\view\\dosen\\pages\\DetailPenelitian.vue?vue&type=template&id=7d504706&","dependencies":[{"path":"C:\\DATA ADIT\\Project EKID\\frontend\\src\\view\\dosen\\pages\\DetailPenelitian.vue","mtime":1699934045996},{"path":"C:\\DATA ADIT\\Project EKID\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1699792569128},{"path":"C:\\DATA ADIT\\Project EKID\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1699792543961},{"path":"C:\\DATA ADIT\\Project EKID\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1699792569128},{"path":"C:\\DATA ADIT\\Project EKID\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1699792543949}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}