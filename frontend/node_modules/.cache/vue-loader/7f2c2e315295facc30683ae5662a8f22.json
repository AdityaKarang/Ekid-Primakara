{"remainingRequest":"C:\\DATA ADIT\\Project EKID\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\DATA ADIT\\Project EKID\\frontend\\src\\view\\content\\CustomCard.vue?vue&type=template&id=d1c64a10&","dependencies":[{"path":"C:\\DATA ADIT\\Project EKID\\frontend\\src\\view\\content\\CustomCard.vue","mtime":1700969139992},{"path":"C:\\DATA ADIT\\Project EKID\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1699792569128},{"path":"C:\\DATA ADIT\\Project EKID\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1699792543961},{"path":"C:\\DATA ADIT\\Project EKID\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1699792569128},{"path":"C:\\DATA ADIT\\Project EKID\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1699792543949}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}