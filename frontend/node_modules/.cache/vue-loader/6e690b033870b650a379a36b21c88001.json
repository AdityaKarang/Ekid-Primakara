{"remainingRequest":"C:\\DATA ADIT\\Project EKID\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\DATA ADIT\\Project EKID\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\DATA ADIT\\Project EKID\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\DATA ADIT\\Project EKID\\frontend\\src\\view\\auth\\login_pages\\Login-1.vue?vue&type=template&id=14f99474&","dependencies":[{"path":"C:\\DATA ADIT\\Project EKID\\frontend\\src\\view\\auth\\login_pages\\Login-1.vue","mtime":1700101112994},{"path":"C:\\DATA ADIT\\Project EKID\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1699792569128},{"path":"C:\\DATA ADIT\\Project EKID\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1699792543961},{"path":"C:\\DATA ADIT\\Project EKID\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1699792569128},{"path":"C:\\DATA ADIT\\Project EKID\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1699792543949}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZC1mbGV4IGZsZXgtY29sdW1uIGZsZXgtcm9vdCIgfSwgWwogICAgX2MoCiAgICAgICJkaXYiLAogICAgICB7CiAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAiXG4gICAgICAgIGxvZ2luIGxvZ2luLTFcbiAgICAgICAgZC1mbGV4XG4gICAgICAgIGZsZXgtY29sdW1uIGZsZXgtbGctcm93IGZsZXgtY29sdW1uLWZsdWlkXG4gICAgICAgIGJnLXdoaXRlXG4gICAgICAiLAogICAgICAgIGNsYXNzOiB7CiAgICAgICAgICAibG9naW4tc2lnbmluLW9uIjogdGhpcy5zdGF0ZSA9PSAic2lnbmluIiwKICAgICAgICAgICJsb2dpbi1zaWdudXAtb24iOiB0aGlzLnN0YXRlID09ICJzaWdudXAiLAogICAgICAgICAgImxvZ2luLWZvcmdvdC1vbiI6IHRoaXMuc3RhdGUgPT0gImZvcmdvdCIKICAgICAgICB9LAogICAgICAgIGF0dHJzOiB7IGlkOiAia3RfbG9naW4iIH0KICAgICAgfSwKICAgICAgWwogICAgICAgIF92bS5fbSgwKSwKICAgICAgICBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAiXG4gICAgICAgICAgbG9naW4tY29udGVudFxuICAgICAgICAgIGZsZXgtcm93LWZsdWlkXG4gICAgICAgICAgZC1mbGV4XG4gICAgICAgICAgZmxleC1jb2x1bW5cbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyXG4gICAgICAgICAgcG9zaXRpb24tcmVsYXRpdmVcbiAgICAgICAgICBvdmVyZmxvdy1oaWRkZW5cbiAgICAgICAgICBwLTdcbiAgICAgICAgICBteC1hdXRvXG4gICAgICAgICIKICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZC1mbGV4IGZsZXgtY29sdW1uLWZsdWlkIGZsZXgtY2VudGVyIiB9LCBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsb2dpbi1mb3JtIGxvZ2luLXNpZ25pbiIgfSwgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJmb3JtIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZm9ybSIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIG5vdmFsaWRhdGU6ICJub3ZhbGlkYXRlIiwKICAgICAgICAgICAgICAgICAgICAgIGlkOiAia3RfbG9naW5fc2lnbmluX2Zvcm0iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl9tKDEpLAogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9ybS1ncm91cCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAiZXhhbXBsZS1pbnB1dC1ncm91cC0xIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJsYWJlbC1mb3IiOiAiZXhhbXBsZS1pbnB1dC0xIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uZm9ybS51c2VybmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiZm9ybS51c2VybmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogInVzZXJuYW1lIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXG4gICAgICAgICAgICAgICAgICAgICAgZm9ybS1jb250cm9sIGZvcm0tY29udHJvbC1zb2xpZFxuICAgICAgICAgICAgICAgICAgICAgIGgtYXV0b1xuICAgICAgICAgICAgICAgICAgICAgIHB5LTdcbiAgICAgICAgICAgICAgICAgICAgICBweC02XG4gICAgICAgICAgICAgICAgICAgICAgcm91bmRlZC1sZ1xuICAgICAgICAgICAgICAgICAgICAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAidXNlcm5hbWUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogIlVzZXJuYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0uZm9ybS51c2VybmFtZSB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS4kc2V0KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmZvcm0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidXNlcm5hbWUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGV2ZW50LnRhcmdldC52YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZvcm0tZ3JvdXAiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogImV4YW1wbGUtaW5wdXQtZ3JvdXAtMiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAibGFiZWwtZm9yIjogImV4YW1wbGUtaW5wdXQtMiIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmZvcm0ucGFzc3dvcmQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImZvcm0ucGFzc3dvcmQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY6ICJwYXNzd29yZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxuICAgICAgICAgICAgICAgICAgICAgIGZvcm0tY29udHJvbCBmb3JtLWNvbnRyb2wtc29saWRcbiAgICAgICAgICAgICAgICAgICAgICBoLWF1dG9cbiAgICAgICAgICAgICAgICAgICAgICBweS03XG4gICAgICAgICAgICAgICAgICAgICAgcHgtNlxuICAgICAgICAgICAgICAgICAgICAgIHJvdW5kZWQtbGdcbiAgICAgICAgICAgICAgICAgICAgIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJwYXNzd29yZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJwYXNzd29yZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9jb21wbGV0ZTogIm9mZiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAiUGFzc3dvcmQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS5mb3JtLnBhc3N3b3JkIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uZm9ybSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJwYXNzd29yZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZXZlbnQudGFyZ2V0LnZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicGItbGctMCBwYi01IHRleHQtY2VudGVyIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICByZWY6ICJrdF9sb2dpbl9zaWduaW5fc3VibWl0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJcbiAgICAgICAgICAgICAgICAgICAgYnRuIGJ0bi1wcmltYXJ5XG4gICAgICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0LWJvbGRlciBmb250LXNpemUtaDZcbiAgICAgICAgICAgICAgICAgICAgcHgtMTVcbiAgICAgICAgICAgICAgICAgICAgcHktNFxuICAgICAgICAgICAgICAgICAgICBteS0zXG4gICAgICAgICAgICAgICAgICAgIG1yLTNcbiAgICAgICAgICAgICAgICAgICIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5zaG93Rm9ybSgic2lnbmluIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIlxuICAgICAgICAgICAgICAgIFNpZ24gSW5cbiAgICAgICAgICAgICAgIildCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibG9naW4tZm9ybSBsb2dpbi1zaWdudXAiIH0sIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiZm9ybSIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZvcm0iLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBub3ZhbGlkYXRlOiAibm92YWxpZGF0ZSIsCiAgICAgICAgICAgICAgICAgICAgICBpZDogImt0X2xvZ2luX3NpZ251cF9mb3JtIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF92bS5fbSgyKSwKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZvcm0tZ3JvdXAiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiAiZnVsbG5hbWUiLAogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAiXG4gICAgICAgICAgICAgICAgICAgIGZvcm0tY29udHJvbCBmb3JtLWNvbnRyb2wtc29saWRcbiAgICAgICAgICAgICAgICAgICAgaC1hdXRvXG4gICAgICAgICAgICAgICAgICAgIHB5LTdcbiAgICAgICAgICAgICAgICAgICAgcHgtNlxuICAgICAgICAgICAgICAgICAgICByb3VuZGVkLWxnXG4gICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZS1oNlxuICAgICAgICAgICAgICAgICAgIiwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICJGdWxsbmFtZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImZ1bGxuYW1lIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvY29tcGxldGU6ICJvZmYiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmb3JtLWdyb3VwIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogInJlbWFpbCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICJcbiAgICAgICAgICAgICAgICAgICAgZm9ybS1jb250cm9sIGZvcm0tY29udHJvbC1zb2xpZFxuICAgICAgICAgICAgICAgICAgICBoLWF1dG9cbiAgICAgICAgICAgICAgICAgICAgcHktN1xuICAgICAgICAgICAgICAgICAgICBweC02XG4gICAgICAgICAgICAgICAgICAgIHJvdW5kZWQtbGdcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplLWg2XG4gICAgICAgICAgICAgICAgICAiLAogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJlbWFpbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICJFbWFpbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImVtYWlsIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvY29tcGxldGU6ICJvZmYiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmb3JtLWdyb3VwIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogInJwYXNzd29yZCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICJcbiAgICAgICAgICAgICAgICAgICAgZm9ybS1jb250cm9sIGZvcm0tY29udHJvbC1zb2xpZFxuICAgICAgICAgICAgICAgICAgICBoLWF1dG9cbiAgICAgICAgICAgICAgICAgICAgcHktN1xuICAgICAgICAgICAgICAgICAgICBweC02XG4gICAgICAgICAgICAgICAgICAgIHJvdW5kZWQtbGdcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplLWg2XG4gICAgICAgICAgICAgICAgICAiLAogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJwYXNzd29yZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICJQYXNzd29yZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogInBhc3N3b3JkIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvY29tcGxldGU6ICJvZmYiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmb3JtLWdyb3VwIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogImNwYXNzd29yZCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICJcbiAgICAgICAgICAgICAgICAgICAgZm9ybS1jb250cm9sIGZvcm0tY29udHJvbC1zb2xpZFxuICAgICAgICAgICAgICAgICAgICBoLWF1dG9cbiAgICAgICAgICAgICAgICAgICAgcHktN1xuICAgICAgICAgICAgICAgICAgICBweC02XG4gICAgICAgICAgICAgICAgICAgIHJvdW5kZWQtbGdcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplLWg2XG4gICAgICAgICAgICAgICAgICAiLAogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJwYXNzd29yZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICJDb25maXJtIHBhc3N3b3JkIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAiY3Bhc3N3b3JkIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvY29tcGxldGU6ICJvZmYiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl9tKDMpLAogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZm9ybS1ncm91cCBkLWZsZXggZmxleC13cmFwIHBiLWxnLTAgcGItMyIKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogImt0X2xvZ2luX3NpZ251cF9zdWJtaXQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJcbiAgICAgICAgICAgICAgICAgICAgYnRuIGJ0bi1wcmltYXJ5XG4gICAgICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0LWJvbGRlciBmb250LXNpemUtaDZcbiAgICAgICAgICAgICAgICAgICAgcHgtOFxuICAgICAgICAgICAgICAgICAgICBweS00XG4gICAgICAgICAgICAgICAgICAgIG15LTNcbiAgICAgICAgICAgICAgICAgICAgbXItNFxuICAgICAgICAgICAgICAgICAgIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiMTUwcHgiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIlxuICAgICAgICAgICAgICAgIFN1Ym1pdFxuICAgICAgICAgICAgICAiKV0KICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJcbiAgICAgICAgICAgICAgICAgICAgYnRuIGJ0bi1saWdodC1wcmltYXJ5XG4gICAgICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0LWJvbGRlciBmb250LXNpemUtaDZcbiAgICAgICAgICAgICAgICAgICAgcHgtOFxuICAgICAgICAgICAgICAgICAgICBweS00XG4gICAgICAgICAgICAgICAgICAgIG15LTNcbiAgICAgICAgICAgICAgICAgICIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYnV0dG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICJrdF9sb2dpbl9zaWdudXBfY2FuY2VsIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLnNob3dGb3JtKCJzaWduaW4iKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJcbiAgICAgICAgICAgICAgICBDYW5jZWxcbiAgICAgICAgICAgICAgIildCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxvZ2luLWZvcm0gbG9naW4tZm9yZ290IiB9LCBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImZvcm0iLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgcmVmOiAia3RfbG9naW5fZm9yZ290X2Zvcm0iLAogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZm9ybSIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIG5vdmFsaWRhdGU6ICJub3ZhbGlkYXRlIiwKICAgICAgICAgICAgICAgICAgICAgIGlkOiAia3RfbG9naW5fZm9yZ290X2Zvcm0iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl9tKDQpLAogICAgICAgICAgICAgICAgICAgIF92bS5fbSg1KSwKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImZvcm0tZ3JvdXAgZC1mbGV4IGZsZXgtd3JhcCBwYi1sZy0wIiB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxuICAgICAgICAgICAgICAgICAgICBidG4gYnRuLXByaW1hcnlcbiAgICAgICAgICAgICAgICAgICAgZm9udC13ZWlnaHQtYm9sZGVyIGZvbnQtc2l6ZS1oNlxuICAgICAgICAgICAgICAgICAgICBweC04XG4gICAgICAgICAgICAgICAgICAgIHB5LTRcbiAgICAgICAgICAgICAgICAgICAgbXktM1xuICAgICAgICAgICAgICAgICAgICBtci00XG4gICAgICAgICAgICAgICAgICAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogImJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAia3RfbG9naW5fZm9yZ290X3N1Ym1pdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIlxuICAgICAgICAgICAgICAgIFN1Ym1pdFxuICAgICAgICAgICAgICAiKV0KICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJcbiAgICAgICAgICAgICAgICAgICAgYnRuIGJ0bi1saWdodC1wcmltYXJ5XG4gICAgICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0LWJvbGRlciBmb250LXNpemUtaDZcbiAgICAgICAgICAgICAgICAgICAgcHgtOFxuICAgICAgICAgICAgICAgICAgICBweS00XG4gICAgICAgICAgICAgICAgICAgIG15LTNcbiAgICAgICAgICAgICAgICAgICIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYnV0dG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICJrdF9sb2dpbl9mb3Jnb3RfY2FuY2VsIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLnNob3dGb3JtKCJzaWduaW4iKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJcbiAgICAgICAgICAgICAgICBDYW5jZWxcbiAgICAgICAgICAgICAgIildCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXQogICAgICAgICkKICAgICAgXQogICAgKQogIF0pCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFsKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKAogICAgICAiZGl2IiwKICAgICAgewogICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgImxvZ2luLWFzaWRlIGQtZmxleCBmbGV4LXJvdy1hdXRvIGJnaS1zaXplLWNvdmVyIGJnaS1uby1yZXBlYXQgcC0xMCBwLWxnLTEwIiwKICAgICAgICBzdGF0aWNTdHlsZTogeyAiYmFja2dyb3VuZC1jb2xvciI6ICIjMDAxNzI5IiB9CiAgICAgIH0sCiAgICAgIFsKICAgICAgICBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAiZC1mbGV4IGZsZXgtcm93LWZsdWlkIGZsZXgtY29sdW1uIGp1c3RpZnktY29udGVudC1iZXR3ZWVuIgogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmxleC1jb2x1bW4tYXV0byBtdC01IHBiLWxnLTAgcGItMTAiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiMiIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibWF4LWgtNTBweCIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogIm1lZGlhL2xvZ29zL3doaXRlcHJpbWFrYXJhLnBuZyIsIGFsdDogIiIgfQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAiZmxleC1jb2x1bW4tZmx1aWQgZC1mbGV4IGZsZXgtY29sdW1uIGp1c3RpZnktY29udGVudC1jZW50ZXIiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImgzIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgImZvbnQtd2VpZ2h0LWJvbGRlciBmb250LXNpemUtaDQgZm9udC1zaXplLWgxLWxnIG1iLTUiLAogICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IGNvbG9yOiAiI2ZmZmZmZiIgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJcbiAgICAgICAgICAgIFdlbGNvbWUgdG8gRUtJRCIpLCBfYygiYnIiKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgInAiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgICAiZm9udC13ZWlnaHQtbGlnaHRlciBmb250LXNpemUtaDQgdGV4dC13aGl0ZSBvcGFjaXR5LTgwIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJTaXN0ZW0gRXZhbHVhc2kgS2luZXJqYSBEb3NlbiBQcmltYWthcmEgVW5pdmVyc2l0eSIpXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKQogICAgICAgICAgXQogICAgICAgICkKICAgICAgXQogICAgKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInBiLTEzIHB0LWxnLTAgcHQtNSIgfSwgWwogICAgICBfYygKICAgICAgICAiaDMiLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAiXG4gICAgICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0LWJvbGRlclxuICAgICAgICAgICAgICAgICAgICB0ZXh0LWRhcmtcbiAgICAgICAgICAgICAgICAgICAgdGV4dC1jZW50ZXJcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplLWg0IGZvbnQtc2l6ZS1oMS1sZ1xuICAgICAgICAgICAgICAgICAgIgogICAgICAgIH0sCiAgICAgICAgW192bS5fdigiXG4gICAgICAgICAgICAgICAgU2lnbiBJblxuICAgICAgICAgICAgICAiKV0KICAgICAgKSwKICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1tdXRlZCBmb250LXdlaWdodC1ib2xkIHRleHQtY2VudGVyIiB9LCBbCiAgICAgICAgX3ZtLl92KCJFbnRlciB5b3VyIHVzZXJuYW1lIGFuZCBwYXNzd29yZCIpCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInBiLTEzIHB0LWxnLTAgcHQtNSIgfSwgWwogICAgICBfYygKICAgICAgICAiaDMiLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAiXG4gICAgICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0LWJvbGRlclxuICAgICAgICAgICAgICAgICAgICB0ZXh0LWRhcmtcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplLWg0IGZvbnQtc2l6ZS1oMS1sZ1xuICAgICAgICAgICAgICAgICAgIgogICAgICAgIH0sCiAgICAgICAgW192bS5fdigiXG4gICAgICAgICAgICAgICAgU2lnbiBVcFxuICAgICAgICAgICAgICAiKV0KICAgICAgKSwKICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1tdXRlZCBmb250LXdlaWdodC1ib2xkIGZvbnQtc2l6ZS1oNCIgfSwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJcbiAgICAgICAgICAgICAgICBFbnRlciB5b3VyIGRldGFpbHMgdG8gY3JlYXRlIHlvdXIgYWNjb3VudFxuICAgICAgICAgICAgICAiCiAgICAgICAgKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmb3JtLWdyb3VwIiB9LCBbCiAgICAgIF9jKCJsYWJlbCIsIHsgc3RhdGljQ2xhc3M6ICJjaGVja2JveCBtYi0wIiB9LCBbCiAgICAgICAgX2MoImlucHV0IiwgeyBhdHRyczogeyB0eXBlOiAiY2hlY2tib3giLCBuYW1lOiAiYWdyZWUiIH0gfSksCiAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAibXItMiIgfSksCiAgICAgICAgX3ZtLl92KCJcbiAgICAgICAgICAgICAgICBJIEFncmVlIHRoZVxuICAgICAgICAgICAgICAgICIpLAogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogIm1sLTIiLCBhdHRyczogeyBocmVmOiAiIyIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoInRlcm1zIGFuZCBjb25kaXRpb25zIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIi5cbiAgICAgICAgICAgICAgIikKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicGItMTMgcHQtbGctMCBwdC01IiB9LCBbCiAgICAgIF9jKAogICAgICAgICJoMyIsCiAgICAgICAgewogICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICJcbiAgICAgICAgICAgICAgICAgICAgZm9udC13ZWlnaHQtYm9sZGVyXG4gICAgICAgICAgICAgICAgICAgIHRleHQtZGFya1xuICAgICAgICAgICAgICAgICAgICBmb250LXNpemUtaDQgZm9udC1zaXplLWgxLWxnXG4gICAgICAgICAgICAgICAgICAiCiAgICAgICAgfSwKICAgICAgICBbX3ZtLl92KCJcbiAgICAgICAgICAgICAgICBGb3Jnb3R0ZW4gUGFzc3dvcmQgP1xuICAgICAgICAgICAgICAiKV0KICAgICAgKSwKICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1tdXRlZCBmb250LXdlaWdodC1ib2xkIGZvbnQtc2l6ZS1oNCIgfSwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJcbiAgICAgICAgICAgICAgICBFbnRlciB5b3VyIGVtYWlsIHRvIHJlc2V0IHlvdXIgcGFzc3dvcmRcbiAgICAgICAgICAgICAgIgogICAgICAgICkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9ybS1ncm91cCIgfSwgWwogICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAiXG4gICAgICAgICAgICAgICAgICAgIGZvcm0tY29udHJvbCBmb3JtLWNvbnRyb2wtc29saWRcbiAgICAgICAgICAgICAgICAgICAgaC1hdXRvXG4gICAgICAgICAgICAgICAgICAgIHB5LTdcbiAgICAgICAgICAgICAgICAgICAgcHgtNlxuICAgICAgICAgICAgICAgICAgICByb3VuZGVkLWxnXG4gICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZS1oNlxuICAgICAgICAgICAgICAgICAgIiwKICAgICAgICBhdHRyczogewogICAgICAgICAgdHlwZTogImVtYWlsIiwKICAgICAgICAgIHBsYWNlaG9sZGVyOiAiRW1haWwiLAogICAgICAgICAgbmFtZTogImVtYWlsIiwKICAgICAgICAgIGF1dG9jb21wbGV0ZTogIm9mZiIKICAgICAgICB9CiAgICAgIH0pCiAgICBdKQogIH0KXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}